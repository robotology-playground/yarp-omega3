/*
 * Copyright (C) 2006-2020 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <thrift/ServiceIDL.h>

#include <yarp/os/idl/WireTypes.h>

class ServiceIDL_set_force_helper :
        public yarp::os::Portable
{
public:
    explicit ServiceIDL_set_force_helper(const double f_x, const double f_y, const double f_z);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_f_x;
    double m_f_y;
    double m_f_z;

    thread_local static std::string s_return_helper;
};

thread_local std::string ServiceIDL_set_force_helper::s_return_helper = {};

ServiceIDL_set_force_helper::ServiceIDL_set_force_helper(const double f_x, const double f_y, const double f_z) :
        m_f_x{f_x},
        m_f_y{f_y},
        m_f_z{f_z}
{
    s_return_helper = {};
}

bool ServiceIDL_set_force_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!writer.writeTag("set_force", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_f_x)) {
        return false;
    }
    if (!writer.writeFloat64(m_f_y)) {
        return false;
    }
    if (!writer.writeFloat64(m_f_z)) {
        return false;
    }
    return true;
}

bool ServiceIDL_set_force_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ServiceIDL_set_position_helper :
        public yarp::os::Portable
{
public:
    explicit ServiceIDL_set_position_helper(const double x, const double y, const double z);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_x;
    double m_y;
    double m_z;

    thread_local static std::string s_return_helper;
};

thread_local std::string ServiceIDL_set_position_helper::s_return_helper = {};

ServiceIDL_set_position_helper::ServiceIDL_set_position_helper(const double x, const double y, const double z) :
        m_x{x},
        m_y{y},
        m_z{z}
{
    s_return_helper = {};
}

bool ServiceIDL_set_position_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!writer.writeTag("set_position", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_x)) {
        return false;
    }
    if (!writer.writeFloat64(m_y)) {
        return false;
    }
    if (!writer.writeFloat64(m_z)) {
        return false;
    }
    return true;
}

bool ServiceIDL_set_position_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ServiceIDL_track_position_helper :
        public yarp::os::Portable
{
public:
    explicit ServiceIDL_track_position_helper(const double x, const double y, const double z);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_x;
    double m_y;
    double m_z;

    thread_local static std::string s_return_helper;
};

thread_local std::string ServiceIDL_track_position_helper::s_return_helper = {};

ServiceIDL_track_position_helper::ServiceIDL_track_position_helper(const double x, const double y, const double z) :
        m_x{x},
        m_y{y},
        m_z{z}
{
    s_return_helper = {};
}

bool ServiceIDL_track_position_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!writer.writeTag("track_position", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_x)) {
        return false;
    }
    if (!writer.writeFloat64(m_y)) {
        return false;
    }
    if (!writer.writeFloat64(m_z)) {
        return false;
    }
    return true;
}

bool ServiceIDL_track_position_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ServiceIDL_set_position_move_param_helper :
        public yarp::os::Portable
{
public:
    explicit ServiceIDL_set_position_move_param_helper(const double amax, const double vmax, const double jerk);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_amax;
    double m_vmax;
    double m_jerk;

    thread_local static std::string s_return_helper;
};

thread_local std::string ServiceIDL_set_position_move_param_helper::s_return_helper = {};

ServiceIDL_set_position_move_param_helper::ServiceIDL_set_position_move_param_helper(const double amax, const double vmax, const double jerk) :
        m_amax{amax},
        m_vmax{vmax},
        m_jerk{jerk}
{
    s_return_helper = {};
}

bool ServiceIDL_set_position_move_param_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(7)) {
        return false;
    }
    if (!writer.writeTag("set_position_move_param", 1, 4)) {
        return false;
    }
    if (!writer.writeFloat64(m_amax)) {
        return false;
    }
    if (!writer.writeFloat64(m_vmax)) {
        return false;
    }
    if (!writer.writeFloat64(m_jerk)) {
        return false;
    }
    return true;
}

bool ServiceIDL_set_position_move_param_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ServiceIDL_set_position_track_param_helper :
        public yarp::os::Portable
{
public:
    explicit ServiceIDL_set_position_track_param_helper(const double amax, const double vmax, const double jerk);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_amax;
    double m_vmax;
    double m_jerk;

    thread_local static std::string s_return_helper;
};

thread_local std::string ServiceIDL_set_position_track_param_helper::s_return_helper = {};

ServiceIDL_set_position_track_param_helper::ServiceIDL_set_position_track_param_helper(const double amax, const double vmax, const double jerk) :
        m_amax{amax},
        m_vmax{vmax},
        m_jerk{jerk}
{
    s_return_helper = {};
}

bool ServiceIDL_set_position_track_param_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(7)) {
        return false;
    }
    if (!writer.writeTag("set_position_track_param", 1, 4)) {
        return false;
    }
    if (!writer.writeFloat64(m_amax)) {
        return false;
    }
    if (!writer.writeFloat64(m_vmax)) {
        return false;
    }
    if (!writer.writeFloat64(m_jerk)) {
        return false;
    }
    return true;
}

bool ServiceIDL_set_position_track_param_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ServiceIDL_stop_helper :
        public yarp::os::Portable
{
public:
    explicit ServiceIDL_stop_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static std::string s_return_helper;
};

thread_local std::string ServiceIDL_stop_helper::s_return_helper = {};

ServiceIDL_stop_helper::ServiceIDL_stop_helper()
{
    s_return_helper = {};
}

bool ServiceIDL_stop_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("stop", 1, 1)) {
        return false;
    }
    return true;
}

bool ServiceIDL_stop_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ServiceIDL_quit_helper :
        public yarp::os::Portable
{
public:
    explicit ServiceIDL_quit_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static std::string s_return_helper;
};

thread_local std::string ServiceIDL_quit_helper::s_return_helper = {};

ServiceIDL_quit_helper::ServiceIDL_quit_helper()
{
    s_return_helper = {};
}

bool ServiceIDL_quit_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("quit", 1, 1)) {
        return false;
    }
    return true;
}

bool ServiceIDL_quit_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
ServiceIDL::ServiceIDL()
{
    yarp().setOwner(*this);
}

std::string ServiceIDL::set_force(const double f_x, const double f_y, const double f_z)
{
    ServiceIDL_set_force_helper helper{f_x, f_y, f_z};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string ServiceIDL::set_force(const double f_x, const double f_y, const double f_z)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ServiceIDL_set_force_helper::s_return_helper : std::string{};
}

std::string ServiceIDL::set_position(const double x, const double y, const double z)
{
    ServiceIDL_set_position_helper helper{x, y, z};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string ServiceIDL::set_position(const double x, const double y, const double z)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ServiceIDL_set_position_helper::s_return_helper : std::string{};
}

std::string ServiceIDL::track_position(const double x, const double y, const double z)
{
    ServiceIDL_track_position_helper helper{x, y, z};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string ServiceIDL::track_position(const double x, const double y, const double z)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ServiceIDL_track_position_helper::s_return_helper : std::string{};
}

std::string ServiceIDL::set_position_move_param(const double amax, const double vmax, const double jerk)
{
    ServiceIDL_set_position_move_param_helper helper{amax, vmax, jerk};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string ServiceIDL::set_position_move_param(const double amax, const double vmax, const double jerk)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ServiceIDL_set_position_move_param_helper::s_return_helper : std::string{};
}

std::string ServiceIDL::set_position_track_param(const double amax, const double vmax, const double jerk)
{
    ServiceIDL_set_position_track_param_helper helper{amax, vmax, jerk};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string ServiceIDL::set_position_track_param(const double amax, const double vmax, const double jerk)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ServiceIDL_set_position_track_param_helper::s_return_helper : std::string{};
}

std::string ServiceIDL::stop()
{
    ServiceIDL_stop_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string ServiceIDL::stop()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ServiceIDL_stop_helper::s_return_helper : std::string{};
}

std::string ServiceIDL::quit()
{
    ServiceIDL_quit_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string ServiceIDL::quit()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ServiceIDL_quit_helper::s_return_helper : std::string{};
}

// help method
std::vector<std::string> ServiceIDL::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("set_force");
        helpString.emplace_back("set_position");
        helpString.emplace_back("track_position");
        helpString.emplace_back("set_position_move_param");
        helpString.emplace_back("set_position_track_param");
        helpString.emplace_back("stop");
        helpString.emplace_back("quit");
        helpString.emplace_back("help");
    } else {
        if (functionName == "set_force") {
            helpString.emplace_back("std::string set_force(const double f_x, const double f_y, const double f_z) ");
        }
        if (functionName == "set_position") {
            helpString.emplace_back("std::string set_position(const double x, const double y, const double z) ");
        }
        if (functionName == "track_position") {
            helpString.emplace_back("std::string track_position(const double x, const double y, const double z) ");
        }
        if (functionName == "set_position_move_param") {
            helpString.emplace_back("std::string set_position_move_param(const double amax, const double vmax, const double jerk) ");
        }
        if (functionName == "set_position_track_param") {
            helpString.emplace_back("std::string set_position_track_param(const double amax, const double vmax, const double jerk) ");
        }
        if (functionName == "stop") {
            helpString.emplace_back("std::string stop() ");
        }
        if (functionName == "quit") {
            helpString.emplace_back("std::string quit() ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool ServiceIDL::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "set_force") {
            double f_x;
            double f_y;
            double f_z;
            if (!reader.readFloat64(f_x)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(f_y)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(f_z)) {
                reader.fail();
                return false;
            }
            ServiceIDL_set_force_helper::s_return_helper = set_force(f_x, f_y, f_z);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(ServiceIDL_set_force_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_position") {
            double x;
            double y;
            double z;
            if (!reader.readFloat64(x)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(y)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(z)) {
                reader.fail();
                return false;
            }
            ServiceIDL_set_position_helper::s_return_helper = set_position(x, y, z);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(ServiceIDL_set_position_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "track_position") {
            double x;
            double y;
            double z;
            if (!reader.readFloat64(x)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(y)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(z)) {
                reader.fail();
                return false;
            }
            ServiceIDL_track_position_helper::s_return_helper = track_position(x, y, z);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(ServiceIDL_track_position_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_position_move_param") {
            double amax;
            double vmax;
            double jerk;
            if (!reader.readFloat64(amax)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(vmax)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(jerk)) {
                reader.fail();
                return false;
            }
            ServiceIDL_set_position_move_param_helper::s_return_helper = set_position_move_param(amax, vmax, jerk);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(ServiceIDL_set_position_move_param_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_position_track_param") {
            double amax;
            double vmax;
            double jerk;
            if (!reader.readFloat64(amax)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(vmax)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(jerk)) {
                reader.fail();
                return false;
            }
            ServiceIDL_set_position_track_param_helper::s_return_helper = set_position_track_param(amax, vmax, jerk);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(ServiceIDL_set_position_track_param_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "stop") {
            ServiceIDL_stop_helper::s_return_helper = stop();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(ServiceIDL_stop_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "quit") {
            ServiceIDL_quit_helper::s_return_helper = quit();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(ServiceIDL_quit_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
